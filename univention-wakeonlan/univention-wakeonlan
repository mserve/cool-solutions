#!/usr/bin/python2.7
# -*- coding: utf-8 -*-

#import ldap, getopt
#import os
#import re
import time
import sys
import getopt
import subprocess


##### ucr
_UCR = None
def init_ucr(force=False):
	"""
	Initialize the configuration registry

	:force: force a reinitialization of UCR
	:returns: ConfigRegistry object
	"""

	global _UCR
	import univention.config_registry
	if _UCR is None or force:
		_UCR = univention.config_registry.ConfigRegistry()
		_UCR.load()
	return _UCR


##### ldapsearch
def getmachinesecret():
	"""
	Reads the machine secret from /etc/machine.secret

	:returns: Returns the machine secret or None if not accessable
	"""

	try:
		f = file("/etc/machine.secret")
		pw = f.read().strip("\n")
		f.close()
		return pw
	except IOError:
		return


_LDAP = None
def init_ldapconnection():
	"""
	Initialize LDAP connection
	
	:returns: ldap connection object
	"""
	
	global _LDAP
	import univention.uldap
	ucr = init_ucr()
	if _LDAP is None:
		port = ucr.get("ldap/port")
		if not port:
			port = ucr.get("ldap/server/port")
		port = int(port)
		args = {"base" : ucr.get("ldap/base"),
				"port" : port,
				"host" : ucr.get("ldap/server/name")
				}
		pw = getmachinesecret()
		if pw is not None:
			# perform an authenticated bind
			args["binddn"] = ucr.get("ldap/hostdn")
			args["bindpw"] = pw
		_LDAP = univention.uldap.access(**args)
	return _LDAP


def ldapsearch(flt, base="", attrlist=None, scope="sub", unique=0, required=0,
		timeout=-1, sizelimit=0, serverctrls=None):
	"""
	Perform a LDAP search
	
	:flt: LDAP filter
	:scope: One of base, one, sub or children
	:base: LDAP search base, defaults to the LDAP base
	:attrlist: List of attributes that shall be retrieved
	:returns: Results of the ldap search. The Result is a list of the form
	          [(DN, {attr1: (value1, value2), ..}), (DN2..)]
	
	Example:
	# this is safe because even if ldapsearch doesn't find anything, it still
	# returns an empty list ([])
	for dn, attrs in ldapsearch("uid=jebersba"):
		print attrs.get("uid", None)
	"""
	
	ldap = init_ldapconnection()
	assert ldap is not None
	return ldap.search(filter=flt, base=base, attr=attrlist, scope=scope, \
			unique=unique, required=required, timeout=timeout, \
			sizelimit=sizelimit, serverctrls=serverctrls)


def ldapget(dn, attrlist=None):
	"""
	Retrieve a single LDAP object
	
	:dn: DN of the object that shall be retrieved
	:attrlist: List of attributes that shall be retrieved
	:returns: Return the ldap object. The Result is a dict of the form
	          {attr1: (value1, value2), ..}
	
	Example:
	# this is safe because even if ldapget doesn"t find anything, it still
	# returns an empty dict ({})
	for k, v in ldapget("uid=jebersba,...").iteritems():
		print k
	"""
	
	ldap = init_ldapconnection()
	assert ldap is not None
	return ldap.get(dn=dn, attr=attrlist)


def getArgs():
	""" get the commandline arguments """
	o, hostnames = getopt.getopt(sys.argv[1:], "d:h")  
	delay = 0
	opts = {}
	for k,v in o:                                                             
		opts[k] = v
	if  opts.has_key("-h"):                                                 
		usage() 
		sys.exit(0)
	if len(hostnames) < 1:
		print "ERROR: no hostname given. Exiting."
		usage()
		sys.exit(0)
	if opts.has_key("-d"):
		delay = float( opts["-d"] )
	return delay, hostnames


def usage():
	""" print help text """
	print """
univention-wakeonlan : wake a host/multiple hosts by fetching the MAC(s) from the LDAP directory 

usage: univention-wakeonlan [-h] [-d <delay(sec)>] <hostname> [<hostname>] [...]

-h\t\t\tprint this message
-d <delay>\t\tset a delay between multiple wakeonlan-calls (in seconds)

example: univention-wakeonlan -d 0.5  hostname1 hostname2 hostname3

Setting "*" as the <hostname> wakes every host listed in the LDAP dir. 
Please set a delay and use with caution!
	"""


delay, hostnames = getArgs()
init_ldapconnection()

# for each hostname given
for hostname in hostnames:
	# Get Mac-Address(es) of Computer and itterate through all of them
	entry = ldapsearch(flt="(&(objectClass=univentionHost)(cn={0}))".format(hostname), attrlist=["cn", "macAddress"])[0]
	for mac in entry[1].get("macAddress"):
		# Wake computer by sending magic package
		print "waking {0} ({1})".format(entry[1].get("cn")[0], mac)
		subprocess.call( ["wakeonlan", mac] )
		time.sleep( delay )

