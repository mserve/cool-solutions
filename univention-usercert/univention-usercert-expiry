#!/usr/bin/python2.7
#
# Copyright 2009-2016 Univention GmbH
#
# http://www.univention.de/
#
# All rights reserved.
#
# The source code of this program is made available
# under the terms of the GNU Affero General Public License version 3
# (GNU AGPL V3) as published by the Free Software Foundation.
#
# Binary versions of this program provided by Univention to you as
# well as other copyrighted, protected or trademarked materials like
# Logos, graphics, fonts, specific documentations and configurations,
# cryptographic keys etc. are subject to a license agreement between
# you and Univention and not subject to the GNU AGPL V3.
#
# In the case you use this program under the terms of the GNU AGPL V3,
# the program is provided in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public
# License with the Debian GNU/Linux or Univention distribution in file
# /usr/share/common-licenses/AGPL-3; if not, see
# <http://www.gnu.org/licenses/>.

import os
import sys
import base64
import string
import time
import datetime
import M2Crypto
import univention.uldap
import univention.config_registry

configRegistry = univention.config_registry.ConfigRegistry()
configRegistry.load()

ldap_base = configRegistry.get('ldap/base', False)
domainname = configRegistry.get('domainname', False)
ldap_host = configRegistry.get('ldap/master', False)
certpath = configRegistry.get('ssl/usercert/certpath', False)
hostCertPath = configRegistry.get('ssl/windowscert/certpath', False)

if not ldap_base or not domainname or not ldap_host or not certpath:
	sys.stderr.write("need proper ucr settings for 'ldap/base', 'domainname', 'ldap/master' and 'ssl/usercert/certpath'\n")
	sys.exit(1)

certificates = {}

# get crl and revoked certs
revoked = {}
sslBase = configRegistry.get('ssl/usercert/sslbase', '/etc/univention/ssl/')
ca = configRegistry.get('ssl/usercert/ca', 'ucsCA')
crlFile = os.path.join(sslBase, ca, "crl", "crl.pem")
crl = M2Crypto.X509.load_crl(crlFile)
for i in crl.as_text().split('\n'):
	i = i.strip()
	if i.startswith("Serial Number: "):
		s = i.split(":")[-1].strip()
		if s:
			revoked[int(s, 16)] = 1


# get pem file or certificate string
# return "valid/invalid", cn and not_after date
def parse_certificate(certificate):
	if os.path.isfile(certificate):
		x509 = M2Crypto.X509.load_cert(certificate)
	else:
		x509 = M2Crypto.X509.load_cert_string(certificate)

	not_after = "%s" % x509.get_not_after()
	subject = "%s" % x509.get_subject()
	serial = x509.get_serial_number()
	epoch_not_after = time.mktime(time.strptime(not_after, "%b %d %H:%M:%S %Y %Z"))
	epoch_now = time.time()
	valid = "invalid per date"

	date_not_after = datetime.datetime.fromtimestamp(epoch_not_after)
	date_now = datetime.datetime.now()
	delta = date_not_after - date_now
	delta = delta.days
	date_not_after = date_not_after.isoformat()

	cn = subject
	for i in subject.split('/'):
		if i.startswith('CN='):
			cn = string.split(i, '=')[1]
	if epoch_now < epoch_not_after:
		valid = "valid"

	if serial in revoked:
		valid = "invalid per crl"

	return (valid, cn, date_not_after, delta, serial)


# ldap certificates
try:
	lo = univention.uldap.getMachineConnection()
except Exception, e:
	print 'ERROR: authentication error: %s' % str(e)
	sys.exit(1)

results = lo.search(filter='userCertificate;binary=*', attr=['userCertificate;binary', 'uid', 'cn'])

for result in results:
	dn = result[0]
	attrs = result[1]

	if 'uid' in attrs and 'userCertificate;binary' in attrs and 'cn' in attrs:
		uid = attrs['uid'][0]
		cert = attrs['userCertificate;binary'][0]
		cn_ldap = attrs['cn'][0]
		if uid and cert:
			cert = '-----BEGIN CERTIFICATE-----\n%s-----END CERTIFICATE-----\n' % base64.encodestring(cert)
			(valid, cn_cert, not_after, delta, serial) = parse_certificate(cert)

			certificates.update({ cn_cert : { "not_after" : not_after, "valid" : valid, "cn_cert" : cn_cert, "delta" : delta, "cn_ldap" : cn_ldap, "uid_ldap" : uid , "serial" : serial} })

# pem files in usercert directory
for path in [certpath, hostCertPath]:
	if path and os.path.isdir(path):
		for root, dirs, files in os.walk(path):
			for file in files:
				if not file == "cert.pem":
					continue
				file = root + "/" + file
				(valid, cn_cert, not_after, delta, serial) = parse_certificate(file)
				if not cn_cert in certificates:
					certificates.update(
						{cn_cert : {
							"not_after" : not_after,
							"valid" : valid,
							"cn_cert" : cn_cert,
							"delta" : delta,
							"cn_ldap" : "",
							"uid_ldap" : "" ,
							"serial" : serial
						}}
					)

cns = certificates.keys()
cns.sort()
print \
	"CN (cert)".ljust(20) + \
	"CN (ldap)".ljust(20) + \
	"UID".ljust(20) + \
	"Valid until".ljust(20) + \
	"Days until expiration".ljust(23) + \
	"Serial".ljust(8) + \
	"Valid".ljust(8)
for cn in cns:
	print \
		str(certificates[cn]["cn_cert"]).ljust(20) + \
		str(certificates[cn]["cn_ldap"]).ljust(20) + \
		str(certificates[cn]["uid_ldap"]).ljust(20) + \
		str(certificates[cn]["not_after"]).ljust(20) + \
		str(certificates[cn]["delta"]).ljust(23) + \
		str(certificates[cn]["serial"]).ljust(8) + \
		str(certificates[cn]["valid"]).ljust(8)
